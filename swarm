#! /usr/bin/python
from pythonlib.swarm import Swarm
import sys
import getopt
import time
#--------------------------------------------------------------------------------------------------------------------------
# Author: Szech696
# Desciption: SWARM is a bruteforce utility for HTML login forms. 
# The speed of SWARM greatly depends upon how fast your connection/computer are. The better the processor the faster, and
# more (if specified) threads SWARM executes. The quicker your connection, the faster POST requests can be made.
# -------------------------------------------------------------------------------------------------------------------------
# THIS IS FOR EDUCATION OR RESEARCH USE ONLY. AUTHOR DOES NOT CONDONE ANY USE FOR ATTEMPT TO GAIN UNAUTHORIZED ACCESS TO 
# SOMEONE ELSES ACCOUNT and/or PROPERTY. DO NOT USE ON A DOMAIN/PROPERTY THAT DOES NOT BELONG TO YOU, OR YOU DO NOT HAVE PERMISSION TO DO SO!
# USE AT YOUR OWN RISK!! AND ABOVE ALL ELSE - ENJOY ;)
#--------------------------------------------------------------------------------------------------------------------------


# function: usage
# description: Displays Example message and exits
def usage():
	print('Usage:')
	print('\t%s --[option]=<arguemnt>'%sys.argv[0])
	print('bruteforcing example:')
	print('\t'+sys.argv[0] + ' %s %s %s '%('--url=http://example.com/login.php',
			'--user-file=usernames.txt',
			'--pass-file=passwords.txt'))
	print('data-collection example:')
	print('\t%s %s %s %s %s %s'%(sys.argv[0],'--url=\'http://example.com\'','--min-word=4','--max-word=8','--crawl=2','--output-file=\'custom-wordlist.lst\''))
	sys.exit()

# function: help
# description: Displays the help message and exits
def showhelp():
	print('\t--url=<URL>				The URL where the login form is located')
        print('\t--username=<USERNAME>			Use a specific username for each attempt (overrides --user-file option)')
        print('\t--user-file=<iFILE>			The username file to use with swarm')
        print('\t--pass-file=<iFILE>			The password file to use with swarm')
        print('\t--threads=<NUMBER>			The number of threads to run swarm with. NOTE depending on the CPU, to many threads can hurt performance')
        print('\t--verbose				Verbose output')
	print('\t--update-time=<NUMBER>			Total time in seconds between showing statistics')
        print('\t--tor					Use tor with swarm')
        print('\t--check-tor				To confirm you are using TOR before swarm continues.')
        print('\t--sql-inject				Try to bypass login with SQL Injections.')
        print('\t--crawl=<NUMBER>			Crawls the domain for login forms, and creates a focused wordlist')
	print('\t--version				Displays this version of swarm, and exits')
	print('\t--output-file=<oFILE>			Output file to log successful login results, or a name of word-list while crawling a domain')
	print('\t--min-word=<NUMBER>			Smallest allowed size for a word, while crawling for a wordlist')
	print('\t--max-word=<NUMBER>			Largest allowed size for a word, while crawling for a wordllist')
	print("\t--switch-node-after=<NUMBER>		Switches TOR exit node after NUMBER tries. This results in a new IP, and increases anonymity")
	usage()

# function: main
# param: argv		- System arguments
# description: Main function of swarm
def main(argv):
	outputFile = None
	swarm = None
	target = None
	username = None
	usernameFile = None
	passwordFile = None
	threads = 1
	verbose = False
	updateTime = 20
	checkTor = False	
	tor = False
	sqlInject = False
	crawl = False
	depth = None
	checkVersion = False
	minWord = 3 
	maxWord = 8 
	maxTriesTillNodeSwitch = 10
	try:
		opts, args = getopt.getopt(argv[1:],'' ,['help',
							 'url=',
							 'user-file=',
							 'pass-file=',
							 'threads=',
							 'verbose',
							 'update-time=',
							 'tor',
							 'check-tor', 
							 'username=',
							 'sql-inject',
							 'crawl=',
							 'version',
							 'output-file=',
							 'min-word=',
							 'max-word=',
							 'switch-node-after='])	
	# Invalid Option
	except getopt.GetoptError as err:
		print(str(err))
		usage()

	for opt, arg in opts:
		if opt == '--help':
			showhelp()
		if opt == '--url':
			target = arg	
		if opt == '--username':
			username = arg	
		if opt == '--user-file':
			usernameFile = arg	
		if opt == '--pass-file':
			passwordFile = arg	
		if opt == '--threads':
			threads = int(arg)	
		if opt == '--verbose':
			verbose = True	
		if opt == '--update-time':
			updateTime = int(arg)	
		if opt == '--check-tor':
			checkTor = True	
		if opt == '--version':
			checkVersion = True	
		if opt == '--tor':
			tor = True	
		if opt == '--output-file':
			outputFile = arg
		if opt == '--sql-inject':
			sqlInject = True	
		if opt == '--crawl':
			crawl = True	
			depth = int(arg)
		if opt == '--min-word':
			minWord = int(arg)
		if opt == '--max-word':
			maxWord = int(arg)
		if opt == '--switch-node-after':
			maxTriesTillNodeSwitch = int(arg)

	if crawl and not outputFile:
		outputFile = 'wordlist-%s.txt'%time.strftime("%c")
	elif not outputFile:
		outputFile = 'results %s.txt'%time.strftime("%c")
	swarm = Swarm(username,usernameFile,passwordFile,target,threads,verbose,tor,checkTor,sqlInject,crawl,depth,updateTime,outputFile,minWord,maxWord,maxTriesTillNodeSwitch)
	if checkVersion:
		swarm.showVersion()
	elif crawl:
		swarm.startCrawling()
	else:
		swarm.startBruteforcing()
if __name__ == "__main__":
	main(sys.argv)
